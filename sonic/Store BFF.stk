{
  "name": "Store BFF",
  "requisitions": [
    {
      "name": "commitSvcRedemption",
      "timeout": 3000,
      "publishers": [
        {
          "type": "http",
          "name": "Publishing in storebff - commitSvcRedemption",
          "url": "http://localhost:8080/commitSvcRedemption",
          "method": "POST",
          "onMessageReceived": {
            "assertions": [
              {
                "name": "Publish Response Code",
                "expect": "statusCode",
                "toBeEqualTo": 200
              }
            ]
          },
          "payload": "{\"transactionReferenceId\":223,\"storeNumber\":\"<<storeNumber>>\"}",
          "headers": {
            "content-type": "application/json",
            "Authorization": "Basic dXNlcjpwYXNzd29yZA=="
          },
          "authentication": {
            "basic": {
              "user": "user",
              "password": "password"
            }
          },
          "id": "id1544130218319CIB3YfJCUz",
          "errors": [],
          "component": "publisher",
          "onInit": {
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          },
          "format": "raw"
        }
      ],
      "subscriptions": [
        {
          "type": "http",
          "name": "Mocking paymentApi /processPayment",
          "endpoint": "/processPayment",
          "port": "<<paymentApiPort>>",
          "method": "POST",
          "timeout": 2000,
          "response": {
            "status": 200,
            "payload": {
              "customerPaymentId": 123456
            }
          },
          "onMessageReceived": {
            "script": "customerPaymentId = JSON.parse(body).customerPaymentId",
            "assertions": [
              {
                "name": "Translation",
                "expect": "customerPaymentId",
                "toBeEqualTo": 223
              }
            ]
          },
          "id": "id1544130218319V7fJecFeBS",
          "errors": [],
          "component": "subscription"
        }
      ],
      "id": "id1544130218319pyHd2Dd3r7",
      "requisitions": [],
      "errors": [],
      "invalidChildren": [],
      "component": "requisition",
      "onInit": {
        "assertions": []
      },
      "onFinish": {
        "assertions": []
      }
    },
    {
      "name": "reverseSvcRedemption",
      "timeout": 3000,
      "publishers": [
        {
          "type": "http",
          "name": "Hitting store-bff /reverseSvcRedemption",
          "url": "http://localhost:8080/reverseSvcRedemption",
          "method": "POST",
          "onMessageReceived": {
            "assertions": [
              {
                "name": "Publish Response Code",
                "expect": "statusCode",
                "toBeEqualTo": 200
              }
            ]
          },
          "payload": "{\"transactionReferenceId\":246,\"storeNumber\":\"<<storeNumber>>\"}",
          "headers": {
            "content-type": "application/json",
            "Authorization": "Basic dXNlcjpwYXNzd29yZA=="
          },
          "authentication": {
            "basic": {
              "user": "user",
              "password": "password"
            }
          },
          "id": "id15441302183401ytd3T05id",
          "errors": [],
          "component": "publisher",
          "format": "raw",
          "onInit": {
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          }
        }
      ],
      "subscriptions": [
        {
          "type": "http",
          "name": "PaymentApiMock /refund",
          "endpoint": "/refund",
          "port": "<<paymentApiPort>>",
          "method": "POST",
          "timeout": 500,
          "response": {
            "status": 200,
            "payload": "{\"customerPaymentId\":246}",
            "format": "raw"
          },
          "headers": {
            "content-type": "application/json"
          },
          "onMessageReceived": {
            "script": "customerPaymentId = JSON.parse(body).customerPaymentId",
            "assertions": [
              {
                "name": "Publish Response Code",
                "expect": "customerPaymentId",
                "toBeEqualTo": 246
              }
            ]
          },
          "id": "id1544130218340xSb9QrmG5R",
          "errors": [],
          "component": "subscription",
          "onInit": {
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          }
        }
      ],
      "id": "id1544130218340Rr9mqsyU4v",
      "requisitions": [],
      "errors": [],
      "invalidChildren": [],
      "component": "requisition",
      "onInit": {
        "assertions": []
      },
      "onFinish": {
        "assertions": []
      }
    },
    {
      "name": "reverseVoidSvcRedemption",
      "requisitions": [],
      "id": "id1544130218351KREZhxu2Sj",
      "publishers": [
        {
          "id": "id1544133441942Wn1MPm5tx2",
          "name": "Publisher #0",
          "type": "http",
          "errors": [],
          "component": "publisher",
          "url": "http://localhost:8080/reverseVoidSvcRedemption",
          "method": "POST",
          "headers": {
            "content-type": "application/json",
            "Authorization": "Basic dXNlcjpwYXNzd29yZA=="
          },
          "payload": "{\"transactionReferenceId\":248,\"storeNumber\":\"<<storeNumber>>\"}",
          "format": "raw",
          "onInit": {
            "assertions": []
          },
          "onMessageReceived": {
            "script": "",
            "assertions": [
              {
                "name": "Publish Response Code",
                "expect": "statusCode",
                "toBeEqualTo": "200"
              }
            ],
            "store": {}
          },
          "onFinish": {
            "assertions": []
          }
        }
      ],
      "subscriptions": [
        {
          "id": "id1544133538442sHd4eBA6pS",
          "name": "Subscription #0",
          "type": "http",
          "errors": [],
          "component": "subscription",
          "onInit": {
            "assertions": []
          },
          "onMessageReceived": {
            "script": "customerPaymentId = JSON.parse(body).customerPaymentId",
            "assertions": [
              {
                "name": "Assertion #0",
                "expect": "customerPaymentId",
                "toBeEqualTo": "248"
              }
            ]
          },
          "onFinish": {
            "assertions": []
          },
          "port": "<<paymentApiPort>>",
          "endpoint": "/reverseRefund",
          "timeout": "1000",
          "method": "POST",
          "headers": {},
          "response": {
            "payload": "{\n    \"customerPaymentId\": 123456\n}",
            "format": "json",
            "status": "200"
          }
        }
      ],
      "errors": [],
      "invalidChildren": [],
      "component": "requisition",
      "onInit": {
        "assertions": []
      },
      "onFinish": {
        "assertions": []
      }
    },
    {
      "id": "id15441341768135ZQx1tvM69",
      "name": "Translate gift card payments",
      "publishers": [],
      "subscriptions": [],
      "requisitions": [
        {
          "id": "id1544134241254jDdpBaeXSj",
          "name": "No cardNetwork",
          "publishers": [
            {
              "id": "id1544134272439acku0aNAXB",
              "name": "Non existent card network",
              "type": "amqp",
              "errors": [],
              "component": "publisher",
              "method": "POST",
              "headers": {},
              "payload": "{\n    \"headers\": {\n        \"correlationId\": 456\n    },\n    \"body\": {\n        \"posTicketId\": 7,\n        \"storeId\": <<storeNumber>>,\n        \"customerPaymentId\": 123456,\n        \"creditCardToken\": 9819465435,\n        \"paymentId\": 8765,\n        \"orderId\": \"xyz\",\n        \"orderVersion\": 22,\n        \"customerId\": \"92965352-3f96-4622-94bb-f87261061067\",\n        \"paymentAmount\": 12.1,\n        \"subTicketId\": 0,\n        \"timestamp\": 0\n    }\n}",
              "format": "raw",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {},
              "onFinish": {
                "assertions": []
              },
              "exchange": "ICE_PAYMENT.E.PAYMENT_NOTIFICATION",
              "routingKey": "ICE_PAYMENT.K.PAYMENT_NOTIFICATION.REQUESTED",
              "exchangeOptions": {},
              "messageOptions": {
                "headers": {}
              },
              "options": {}
            }
          ],
          "subscriptions": [
            {
              "id": "id1544134276645a0R6rirOJO",
              "name": "Message to StoreBFF",
              "type": "amqp",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "script": "payload = JSON.parse(Buffer.from(payload.data).toString());",
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "deliveryInfo.routingKey",
                    "toBeEqualTo": "'stores.<<storeNumber>>'"
                  },
                  {
                    "name": "Assertion #1",
                    "expect": "payload.headers.type",
                    "toBeEqualTo": "'orderAheadPayment'"
                  },
                  {
                    "name": "Assertion #2",
                    "expect": "payload.body.cardName",
                    "toBeEqualTo": "'Gift Card'"
                  },
                  {
                    "name": "Assertion #3",
                    "expect": "payload.body.cardType",
                    "toBeEqualTo": "'GC'"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "exchange": "STORE_EXCHANGE",
              "routingKey": "stores.#",
              "options": {}
            }
          ],
          "requisitions": [],
          "errors": [],
          "invalidChildren": [],
          "component": "requisition",
          "onInit": {
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          }
        }
      ],
      "errors": [],
      "invalidChildren": [],
      "component": "requisition",
      "onInit": {
        "assertions": []
      },
      "onFinish": {
        "assertions": []
      }
    },
    {
      "id": "id1544190712158SxI4XkCGfT",
      "name": "395: Personalized Messages",
      "publishers": [],
      "subscriptions": [],
      "requisitions": [
        {
          "id": "id1544190745829fOZruj4zvabsca12313",
          "name": "Not known customer",
          "publishers": [
            {
              "id": "id1544190767165qiXusnaDHjZruj4zvabsca12313",
              "name": "Unknown arrival",
              "type": "amqp",
              "errors": [],
              "component": "publisher",
              "method": "POST",
              "headers": {},
              "payload": "{\n    \"headers\": {\n        \"correlationId\": 456\n    },\n    \"body\": {\n        \"mobile\": 123,\n        \"visit\": \"visit\",\n        \"ticketId\": \"ticketId\",\n        \"order\": \"order\",\n        \"visitId\": 7,\n        \"status\": \"INITIATED\",\n        \"timestamp\": 987765765312,\n        \"customer\": {\n            \"profilePictureUrl\": \"http://profilepicture.com\",\n            \"givenName\": \"<<user.givenName>>\",\n            \"familyName\": \"<<user.familyName>>\",\n            \"id\": \"<<user.id>>\"\n        }\n    }\n}",
              "format": "json",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {},
              "onFinish": {
                "assertions": []
              },
              "exchange": "ICE_VISIT.E.NOTIFICATION",
              "routingKey": "ICE_VISIT.K.VISIT_CHECK_IN",
              "exchangeOptions": {},
              "messageOptions": {
                "headers": {}
              },
              "options": {
                "host": "localhost",
                "port": "5672"
              }
            }
          ],
          "subscriptions": [
            {
              "id": "id1544190992010rEUWPgM276Zruj4zvabsca12313",
              "name": "getVisit mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "script": "subscription.response.payload.visitorId = store.user.id;",
                "assertions": []
              },
              "onMessageReceived": {
                "script": "params.visitId",
                "assertions": [
                  {
                    "name": "Publish Response Code",
                    "expect": "params.visitId",
                    "toBeEqualTo": "subscription.parent.publishers[0].payload.body.visitId"
                  }
                ]
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<visitApiPort>>",
              "endpoint": "/visits/:visitId",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"storeId\":\"<<storeNumber>>\",\"status\":\"INITIATED\",\"visitLocator\":12,\"visitorId\":\"<<user.id>>\",\"createdAt\":987,\"updatedAt\":987,\"optionalClientId\":987}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id1544191129903GUBb80gFpZruj4zvabsca123138",
              "name": "publicProfile mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "script": "subscription.response.payload.givenName = store.user.givenName;\nsubscription.response.payload.familyName = store.user.familyName;",
                "assertions": []
              },
              "onMessageReceived": {
                "script": "\n",
                "assertions": [
                  {
                    "name": "Publish Response Code",
                    "expect": "params.customerId",
                    "toBeEqualTo": "store.user.id"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<customerApiPort>>",
              "endpoint": "/publicProfiles/:customerId",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"profilePictureUrl\":\"http://profilepicture.com\"}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id1544191364933QL20Zruj4zvabsca123138TTgyM",
              "name": "getOrderRequest mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "assertions": [
                  {
                    "name": "Publish Response Code",
                    "expect": "query.storeId",
                    "toBeEqualTo": "<<storeNumber>>"
                  },
                  {
                    "name": "Assertion #1",
                    "expect": "query.userId",
                    "toBeEqualTo": "store.user.id"
                  }
                ]
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<orderApiPort>>",
              "endpoint": "/orderRequests/open",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"orderId\":123456}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id1544191Zruj4zvabsca12313476937yNbXPWuCzH",
              "name": "getOrder mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "assertions": [
                  {
                    "name": "Publish Response Code",
                    "expect": "params.orderId",
                    "toBeEqualTo": "subscription.parent.subscriptions[2].response.payload.orderId"
                  }
                ]
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<orderApiPort>>",
              "endpoint": "/orders/:orderId/basic",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"posTicketId\":\"posTickerId\"}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id154419583Zruj4zvabsca123133448X90lwJlveM",
              "name": "Checkin message",
              "type": "amqp",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "script": "payload = JSON.parse(Buffer.from(payload.data).toString());\nbody = payload.body;\n",
                "assertions": [
                  {
                    "name": "Publish Response Code",
                    "expect": "payload.headers.type",
                    "toBeEqualTo": "'checkin'"
                  },
                  {
                    "name": "Assertion #1",
                    "expect": "body.mobile",
                    "toBeEqualTo": "12"
                  },
                  {
                    "name": "Assertion #2",
                    "expect": "body.visit",
                    "toBeEqualTo": "7"
                  },
                  {
                    "name": "Assertion #3",
                    "expect": "body.ticketId",
                    "toBeEqualTo": "'posTickerId'"
                  },
                  {
                    "name": "Assertion #4",
                    "expect": "body.order",
                    "toBeEqualTo": "'123456'"
                  },
                  {
                    "name": "Assertion #5",
                    "expectToBeDefined": "body.timestamp"
                  },
                  {
                    "name": "Assertion #6",
                    "expect": "body.customer.message",
                    "toContain": "'Welcome back, ' + store.user.givenName"
                  },
                  {
                    "name": "Assertion #7",
                    "expect": "body.customer.profilePictureUrl",
                    "toBeEqualTo": "`http://profilepicture.com`"
                  },
                  {
                    "name": "Assertion #8",
                    "expect": "body.customer.givenName",
                    "toBeEqualTo": "store.user.givenName"
                  },
                  {
                    "name": "Assertion #9",
                    "expect": "body.customer.familyName",
                    "toBeEqualTo": "store.user.familyName"
                  },
                  {
                    "name": "Assertion #10",
                    "expect": "body.customer.id",
                    "toBeEqualTo": "store.user.id"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "exchange": "STORE_EXCHANGE",
              "routingKey": "stores.9998",
              "options": {
                "host": "localhost",
                "port": "5672"
              }
            }
          ],
          "requisitions": [],
          "errors": [],
          "invalidChildren": [],
          "component": "requisition",
          "onInit": {
            "script": "store.user = {\n  givenName: \"Guilherme\",\n  familyName: \"Moraes\",\n  id: \"997689518\"\n}",
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          }
        },
        {
          "id": "id1544190745829fOZruj4zvV",
          "name": "Known customer",
          "publishers": [
            {
              "id": "id1544190767165qiXusnaDHj",
              "name": "Doug arrival",
              "type": "amqp",
              "errors": [],
              "component": "publisher",
              "method": "POST",
              "headers": {},
              "payload": "{\n    \"headers\": {\n        \"correlationId\": 456\n    },\n    \"body\": {\n        \"mobile\": 123,\n        \"visit\": \"visit\",\n        \"ticketId\": \"ticketId\",\n        \"order\": \"order\",\n        \"visitId\": 7,\n        \"status\": \"INITIATED\",\n        \"timestamp\": 987765765312,\n        \"customer\": {\n            \"profilePictureUrl\": \"http://profilepicture.com\",\n            \"givenName\": \"<<user.givenName>>\",\n            \"familyName\": \"<<user.familyName>>\",\n            \"id\": \"<<user.id>>\"\n        }\n    }\n}",
              "format": "json",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {},
              "onFinish": {
                "assertions": []
              },
              "exchange": "ICE_VISIT.E.NOTIFICATION",
              "routingKey": "ICE_VISIT.K.VISIT_CHECK_IN",
              "exchangeOptions": {},
              "messageOptions": {
                "headers": {}
              },
              "options": {
                "host": "localhost",
                "port": "5672"
              }
            }
          ],
          "subscriptions": [
            {
              "id": "id1544190992010rEUWPgM276",
              "name": "getVisit mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "script": "subscription.response.payload.visitorId = store.user.id;",
                "assertions": []
              },
              "onMessageReceived": {
                "script": "\n",
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "params.visitId",
                    "toBeEqualTo": "subscription.parent.publishers[0].payload.body.visitId"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<visitApiPort>>",
              "endpoint": "/visits/:visitId",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\n    \"storeId\": \"<<storeNumber>>\",\n    \"status\": \"INITIATED\",\n    \"visitLocator\": 12,\n    \"visitorId\": \"<<user.id>>\",\n    \"createdAt\": 987,\n    \"updatedAt\": 987,\n    \"optionalClientId\": 987\n}",
                "format": "json",
                "status": "200"
              }
            },
            {
              "id": "id1544191129903GUBb80gFp8",
              "name": "publicProfile mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "script": "subscription.response.payload.givenName = store.user.givenName;\nsubscription.response.payload.familyName = store.user.familyName;",
                "assertions": []
              },
              "onMessageReceived": {
                "script": "\n",
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "params.customerId",
                    "toBeEqualTo": "store.user.id"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<customerApiPort>>",
              "endpoint": "/publicProfiles/:customerId",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\n    \"profilePictureUrl\": \"http://profilepicture.com\"\n}",
                "format": "json",
                "status": "200"
              }
            },
            {
              "id": "id1544191364933QL208TTgyM",
              "name": "getOrderRequest mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "query.storeId",
                    "toBeEqualTo": "<<storeNumber>>"
                  },
                  {
                    "name": "Assertion #1",
                    "expect": "query.userId",
                    "toBeEqualTo": "store.user.id"
                  }
                ]
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<orderApiPort>>",
              "endpoint": "/orderRequests/open",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"orderId\":123456}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id1544191476937yNbXPWuCzH",
              "name": "getOrder mock",
              "type": "http",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "params.orderId",
                    "toBeEqualTo": "subscription.parent.subscriptions[2].response.payload.orderId"
                  }
                ]
              },
              "onFinish": {
                "assertions": []
              },
              "port": "<<orderApiPort>>",
              "endpoint": "/orders/:orderId/basic",
              "timeout": "",
              "method": "GET",
              "headers": {},
              "response": {
                "payload": "{\"posTicketId\":\"posTickerId\"}",
                "format": "raw",
                "status": "200"
              }
            },
            {
              "id": "id1544195833448X90lwJlveM",
              "name": "Checkin message",
              "type": "amqp",
              "errors": [],
              "component": "subscription",
              "onInit": {
                "assertions": []
              },
              "onMessageReceived": {
                "script": "payload = JSON.parse(Buffer.from(payload.data).toString());\nbody = payload.body;\n",
                "assertions": [
                  {
                    "name": "Assertion #0",
                    "expect": "payload.headers.type",
                    "toBeEqualTo": "'checkin'"
                  },
                  {
                    "name": "Assertion #1",
                    "expect": "body.mobile",
                    "toBeEqualTo": "12"
                  },
                  {
                    "name": "Assertion #2",
                    "expect": "body.visit",
                    "toBeEqualTo": "7"
                  },
                  {
                    "name": "Assertion #3",
                    "expect": "body.ticketId",
                    "toBeEqualTo": "'posTickerId'"
                  },
                  {
                    "name": "Assertion #4",
                    "expect": "body.order",
                    "toBeEqualTo": "'123456'"
                  },
                  {
                    "name": "Assertion #5",
                    "expectToBeDefined": "body.timestamp"
                  },
                  {
                    "name": "Assertion #6",
                    "expect": "body.customer.message",
                    "toContain": "store.user.givenName"
                  },
                  {
                    "name": "Assertion #7",
                    "expect": "body.customer.profilePictureUrl",
                    "toBeEqualTo": "`http://profilepicture.com`"
                  },
                  {
                    "name": "Assertion #8",
                    "expect": "body.customer.givenName",
                    "toBeEqualTo": "store.user.givenName"
                  },
                  {
                    "name": "Assertion #9",
                    "expect": "body.customer.familyName",
                    "toBeEqualTo": "store.user.familyName"
                  },
                  {
                    "name": "Assertion #10",
                    "expect": "body.customer.id",
                    "toBeEqualTo": "store.user.id"
                  }
                ],
                "store": {}
              },
              "onFinish": {
                "assertions": []
              },
              "exchange": "STORE_EXCHANGE",
              "routingKey": "stores.9998",
              "options": {
                "host": "localhost",
                "port": "5672"
              }
            }
          ],
          "requisitions": [],
          "errors": [],
          "invalidChildren": [],
          "component": "requisition",
          "onInit": {
            "script": "store.user = {\n  givenName: \"Doug\",\n  familyName: \"Cook\",\n  id: \"9E4055AE-5F98-41F3-AC9D-A2829C283068\"\n}",
            "assertions": []
          },
          "onFinish": {
            "assertions": []
          }
        }
      ],
      "errors": [],
      "invalidChildren": [],
      "component": "requisition",
      "onInit": {
        "assertions": []
      },
      "onFinish": {
        "assertions": []
      },
      "timeout": ""
    }
  ],
  "id": "id1544130218389iQoJdU7LLE",
  "publishers": [],
  "subscriptions": [],
  "errors": [],
  "invalidChildren": [],
  "component": "requisition",
  "onInit": {
    "script": "store.storesAmqpOptions = {\n\t\t\"host\": \"localhost\",\n\t\t\"port\": 5672\n};\nstore.dapiAmqpOptions = {\n\t\t\"host\": \"localhost\",\n\t\t\"port\": 5672\n}\n\n",
    "assertions": [],
    "store": {
      "storeNumber": "9998",
      "visitApiPort": "23070",
      "customerApiPort": "23071",
      "orderApiPort": "23072",
      "paymentApiPort": "23073"
    }
  },
  "onFinish": {
    "assertions": []
  }
}
